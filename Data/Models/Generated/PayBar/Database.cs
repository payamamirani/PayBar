




















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `PayBar`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Server=10.1.1.95;Initial Catalog=PayBar;user id=sa; password=**zapped**;`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace Data.Models.Generated.PayBar
{

	public partial class PayBarDB : Database
	{
		public PayBarDB() 
			: base("PayBar")
		{
			CommonConstruct();
		}

		public PayBarDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			PayBarDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static PayBarDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new PayBarDB();
        }

		[ThreadStatic] static PayBarDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static PayBarDB repo { get { return PayBarDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("dbo.Accounts")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class Account : PayBarDB.Record<Account>  
    {



		[Column] public long ID { get; set; }





		[Column] public string AccountTitle { get; set; }





		[Column] public int AccountType { get; set; }





		[Column] public long MerchantID { get; set; }





		[Column] public decimal BalanceAmount { get; set; }





		[Column] public long BankID { get; set; }





		[Column] public string IBAN { get; set; }





		[Column] public string AccountNumber { get; set; }





		[Column] public string CardNo { get; set; }





		[Column] public bool IsActive { get; set; }





		[Column] public DateTime CreatedOn { get; set; }





		[Column] public string CreatedBy { get; set; }





		[Column] public DateTime? ModifiedOn { get; set; }





		[Column] public string ModifiedBy { get; set; }



	}

    

	[TableName("dbo.Banks")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class Bank : PayBarDB.Record<Bank>  
    {



		[Column] public long ID { get; set; }





		[Column] public string IIN { get; set; }





		[Column] public string Title { get; set; }





		[Column] public string EnTitle { get; set; }





		[Column] public bool IsActive { get; set; }





		[Column] public DateTime CreatedOn { get; set; }





		[Column] public string CreatedBy { get; set; }





		[Column] public DateTime? ModifiedOn { get; set; }





		[Column] public string ModifiedBy { get; set; }



	}

    

	[TableName("dbo.DocumentDetail")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class DocumentDetail : PayBarDB.Record<DocumentDetail>  
    {



		[Column] public long ID { get; set; }





		[Column] public long DocumentID { get; set; }





		[Column] public long AccountID { get; set; }





		[Column] public decimal Amount { get; set; }





		[Column] public decimal BalanceAmount { get; set; }



	}

    

	[TableName("dbo.Documents")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class Document : PayBarDB.Record<Document>  
    {



		[Column] public long ID { get; set; }





		[Column] public string Title { get; set; }





		[Column] public string DocumentType { get; set; }





		[Column] public DateTime CreatedOn { get; set; }





		[Column] public string CreatedBy { get; set; }





		[Column] public DateTime BusinessDate { get; set; }





		[Column] public long? TxnID { get; set; }



	}

    

	[TableName("dbo.Mcc")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class Mcc : PayBarDB.Record<Mcc>  
    {



		[Column] public long ID { get; set; }





		[Column] public string Title { get; set; }





		[Column] public string TitleEn { get; set; }





		[Column] public bool IsActive { get; set; }





		[Column] public DateTime CreatedOn { get; set; }





		[Column] public string CreatedBy { get; set; }





		[Column] public DateTime? ModifiedOn { get; set; }





		[Column] public string ModifiedBy { get; set; }



	}

    

	[TableName("dbo.Merchants")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class Merchant : PayBarDB.Record<Merchant>  
    {



		[Column] public long ID { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string Family { get; set; }





		[Column] public string EnName { get; set; }





		[Column] public string EnFamily { get; set; }





		[Column] public string FullName { get; set; }





		[Column] public string PicUrl { get; set; }





		[Column] public long? MccID { get; set; }





		[Column] public string CellNo { get; set; }





		[Column] public string Address { get; set; }





		[Column] public bool IsActive { get; set; }





		[Column] public DateTime CreatedOn { get; set; }





		[Column] public string CreatedBy { get; set; }





		[Column] public DateTime? ModifiedOn { get; set; }





		[Column] public string ModifiedBy { get; set; }



	}

    

	[TableName("dbo.TxnKey")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class TxnKey : PayBarDB.Record<TxnKey>  
    {



		[Column] public long ID { get; set; }





		[Column] public string Key { get; set; }





		[Column] public long UserID { get; set; }





		[Column] public string IMEI { get; set; }





		[Column] public DateTime ExpireDate { get; set; }





		[Column] public bool IsActive { get; set; }





		[Column] public DateTime CreatedOn { get; set; }



	}

    

	[TableName("dbo.Txns")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class Txn : PayBarDB.Record<Txn>  
    {



		[Column] public long ID { get; set; }





		[Column] public string CardNo { get; set; }





		[Column] public decimal Amount { get; set; }





		[Column] public DateTime CreatedOn { get; set; }





		[Column] public string CreatedBy { get; set; }





		[Column] public long MerchantID { get; set; }





		[Column] public bool? IsSetteled { get; set; }





		[Column] public DateTime? SetteledDate { get; set; }





		[Column] public DateTime BusinessDate { get; set; }





		[Column] public int RespCode { get; set; }



	}

    

	[TableName("dbo.Users")]



	[PrimaryKey("ID")]




	[ExplicitColumns]

    public partial class User : PayBarDB.Record<User>  
    {



		[Column] public long ID { get; set; }





		[Column] public string CellNo { get; set; }





		[Column] public string Password { get; set; }





		[Column] public string IMEI { get; set; }





		[Column] public string Token { get; set; }





		[Column] public string MasterKey { get; set; }





		[Column] public bool IsActive { get; set; }





		[Column] public DateTime CreatedOn { get; set; }





		[Column] public string CreatedBy { get; set; }





		[Column] public DateTime? ModifiedOn { get; set; }





		[Column] public string ModifiedBy { get; set; }





		[Column] public int Status { get; set; }





		[Column] public long? MerchantID { get; set; }



	}


}
